{"version":3,"sources":["js/promise/03-task-promisi.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","resolve","reject","setTimeout","id","time","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":";AAAA,MAAMA,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGlDK,EAAkBC,IACdC,MAAAA,EAAQR,EAA0B,IAAK,KAEtC,OAAA,IAAIS,QAAQ,CAACC,EAASC,KACzBC,WAAW,KACYT,KAAKE,SAAW,IAG/BK,EAAQ,CAAEG,GAAIN,EAAYM,GAAIC,KAAMN,IAExCG,EAAOJ,EAAYM,KACpBL,MAILO,EAAa,EAAGF,GAAAA,EAAIC,KAAAA,MACtBE,QAAQC,mBAAmBJ,kBAAmBC,QAG5CI,EAAWL,IACbG,QAAQG,qCAC4BN,+BASxCP,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC7BC,KAAKN,GACLO,MAAMJ,GACXZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC7BC,KAAKN,GACLO,MAAMJ","file":"03-task-promisi.a05edb1f.js","sourceRoot":"../src","sourcesContent":["const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve({ id: transaction.id, time: delay });\n            }\n            reject(transaction.id);\n        }, delay);\n    });\n};\n\nconst logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n    console.warn(\n        `Error processing transaction ${id}. Please try again later.`,\n    );\n};\n\n// // Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\nmakeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n"]}